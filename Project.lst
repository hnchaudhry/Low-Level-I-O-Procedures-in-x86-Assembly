Microsoft (R) Macro Assembler Version 14.29.30136.0	    12/06/21 02:45:34
<Project 6 - String Primitives and Macros     (Proj6_chaudhr  Page 1 - 1


				TITLE Project 6 - String Primitives and Macros     (Proj6_chaudhrh.asm)

				; Author: Hassan Chaudhry 
				; Last Modified: 12/5/2021
				; OSU email address: chaudhrh@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: 6                 Due Date: 12/5/2021
				; Description: A program that displays a title, programmer name, and instructions then
				;		asks the user for 10 numerical inputs as a string. The strings are converted
				;		to signed integers and validated. Validation checks to make sure the strings
				;		only contain numerical inputs and the converted integers individually fit in a 32-bit
				;		register. If the string did not contain only '+' or '-' (first character only to show sign), 
				;		numerical values, it was to large to fit in a 32-bit register, or it was empty, an error  
				;		is thrown and the user is asked to input another string. Once validation is completed, 
				;		the program will take the signed integers, convert them back into strings, and display
				;		them to the user as a list. It will them sum up all of the integers and displays the  
				;		sum. The average is then calculated and a truncated version of it is displayed to the 
				;		user. Finally, a goodbye message is displayed before exiting the program.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

 00000000			.data
 00000000 50 52 4F 47 52		intro1            BYTE   "PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures",13,10,
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 57 72 69
	   74 74 65 6E 20
	   62 79 3A 20 48
	   61 73 73 61 6E
	   20 43 68 61 75
	   64 68 72 79 0D
	   0A 00
								             "Written by: Hassan Chaudhry",13,10,0
 0000005C 50 6C 65 61 73		intro2            BYTE   "Please provide 10 signed decimal integers.",13,10,
	   65 20 70 72 6F
	   76 69 64 65 20
	   31 30 20 73 69
	   67 6E 65 64 20
	   64 65 63 69 6D
	   61 6C 20 69 6E
	   74 65 67 65 72
	   73 2E 0D 0A 45
	   61 63 68 20 6E
	   75 6D 62 65 72
	   20 6E 65 65 64
	   73 20 74 6F 20
	   62 65 20 73 6D
	   61 6C 6C 20 65
	   6E 6F 75 67 68
	   20 74 6F 20 66
	   69 74 20 69 6E
	   73 69 64 65 20
	   61 20 33 32 20
	   62 69 74 20 72
	   65 67 69 73 74
	   65 72 2E 20 41
	   66 74 65 72 20
	   79 6F 75 20 68
	   61 76 65 20 66
	   69 6E 69 73 68
	   65 64 0D 0A 69
	   6E 70 75 74 74
	   69 6E 67 20 74
	   68 65 20 72 61
	   77 20 6E 75 6D
	   62 65 72 73 20
	   49 20 77 69 6C
	   6C 20 64 69 73
	   70 6C 61 79 20
	   61 20 6C 69 73
	   74 20 6F 66 20
	   74 68 65 20 69
	   6E 74 65 67 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 20 76 61
	   6C 75 65 2E 0D
	   0A 00
								             "Each number needs to be small enough to fit inside a 32 bit register. After you have finished",13,10, 
								             "inputting the raw numbers I will display a list of the integers, their sum, and their average value.",13,10,0
 0000014E 50 6C 65 61 73		userNumPrompt     BYTE   "Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000016D 45 52 52 4F 52		enteredNumError   BYTE   "ERROR: You did not enter a signed number or your number was too big. Try again.",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 73 69 67
	   6E 65 64 20 6E
	   75 6D 62 65 72
	   20 6F 72 20 79
	   6F 75 72 20 6E
	   75 6D 62 65 72
	   20 77 61 73 20
	   74 6F 6F 20 62
	   69 67 2E 20 54
	   72 79 20 61 67
	   61 69 6E 2E 0D
	   0A 00
 000001BF 59 6F 75 20 65		listPrompt        BYTE   "You entered the following numbers:",13,10,0
	   6E 74 65 72 65
	   64 20 74 68 65
	   20 66 6F 6C 6C
	   6F 77 69 6E 67
	   20 6E 75 6D 62
	   65 72 73 3A 0D
	   0A 00
 000001E4 54 68 65 20 73		sumPrompt         BYTE   "The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000202 54 68 65 20 74		averagePrompt     BYTE   "The truncated average is: ",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 0000021D 54 68 61 6E 6B		goodbyePrompt     BYTE   "Thanks for playing!",13,10,0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 0D
	   0A 00
 00000233 2C 20 00			spacer            BYTE   ", ",0
 00000236  0000000D [			userStrBuffer     BYTE   13 DUP(?)                     ; string to be entered
	    00
	   ]
 00000243  0000000D [			intToStr          BYTE   13 DUP(?)
	    00
	   ]
 00000250  0000000D [			revIntToStr       BYTE   13 DUP(?)
	    00
	   ]
 0000025D 0000000D			sizeRevStr        DWORD  SIZEOF revIntToStr
 00000261 0000000D			userStrBufferSize DWORD  SIZEOF userStrBuffer
 00000265 00000000			userStrByteCount  DWORD  ?
 00000269 00000000			userEnteredNum    SDWORD ?
 0000026D  0000000A [			userInputArray    SDWORD 10 DUP(?)
	    00000000
	   ]

 00000000			.code
 00000000			main PROC
					;------------------------------------------------------------------
					; Calls prompts procedure to display program title, programmer
					;		name, and intructions to the user.
					;------------------------------------------------------------------
 00000000  68 00000000 R		PUSH  OFFSET intro1
 00000005  E8 00000312			CALL  prompts
 0000000A  E8 00000000 E		CALL  CrLf
 0000000F  68 0000005C R		PUSH  OFFSET intro2
 00000014  E8 00000303			CALL  prompts
 00000019  E8 00000000 E		CALL  CrLf

					;------------------------------------------------------------------
					; Calls ReadVal procedure 10 times to ask user for a numerical
					;		string and each time stores the input into an array.
					;------------------------------------------------------------------
					; Set loop counter to 10 and start at first element address
 0000001E  B9 0000000A			MOV   ECX, LENGTHOF userInputArray
 00000023  B8 00000000			MOV   EAX, 0
					
 00000028			_CallReadVal:
					; Call call ReadVal with passed parameters
 00000028  68 0000014E R		PUSH  OFFSET userNumPrompt
 0000002D  68 00000236 R		PUSH  OFFSET userStrBuffer
 00000032  68 00000265 R		PUSH  OFFSET userStrByteCount
 00000037  68 0000016D R		PUSH  OFFSET enteredNumError
 0000003C  68 00000269 R		PUSH  OFFSET userEnteredNum
 00000041  FF 35 00000261 R		PUSH  userStrBufferSize
 00000047  E8 000000F2			CALL  ReadVal

					; Fill array with user entered num and get next string
 0000004C  BF 0000026D R		MOV   EDI, OFFSET userInputArray
 00000051  03 F8			ADD   EDI, EAX                                    ; Increment to next element in array
 00000053  8B 35 00000269 R		MOV   ESI, userEnteredNum
 00000059  89 37			MOV   [EDI], ESI
 0000005B  83 C0 04			ADD   EAX, TYPE userInputArray                    ; Set EAX to offset of next element
 0000005E  E2 C8			LOOP  _CallReadVal

					;------------------------------------------------------------------
					; Calls WriteVal procedure 10 times to convert a signed integer
					;		to a string and display the strings as a list with a
					;		message to the user with prompts procedure.
					;------------------------------------------------------------------
					; Display list prompt
 00000060  E8 00000000 E		CALL  CrLf
 00000065  68 000001BF R		PUSH  OFFSET listPrompt
 0000006A  E8 000002AD			CALL  prompts

					; Set loop counter to 10 and start at first element address
 0000006F  B9 0000000A			MOV   ECX, LENGTHOF userInputArray
 00000074  B8 00000000			MOV   EAX, 0

 00000079			_CallWriteVal:
					; Get address of element in array and point to next element
 00000079  BE 0000026D R		MOV   ESI, OFFSET userInputArray
 0000007E  03 F0			ADD   ESI, EAX
					
					; Call WriteVal procedure with passed parameters
 00000080  68 00000243 R		PUSH  OFFSET intToStr
 00000085  68 00000250 R		PUSH  OFFSET revIntToStr
 0000008A  FF 35 0000025D R		PUSH  sizeRevStr
 00000090  FF 36			PUSH  [ESI]
 00000092  E8 000001F5			CALL  WriteVal
 00000097  83 F9 01			CMP   ECX, 1
 0000009A  74 0A			JZ   _WriteValLoop

 0000009C			_ListSpacing:
					; Display spacing after numbers
 0000009C  68 00000233 R		PUSH  OFFSET spacer
 000000A1  E8 00000276			CALL  prompts

 000000A6			_WriteValLoop:	
					; Increment offset to next element in array and get next element address
 000000A6  83 C0 04			ADD   EAX, TYPE userInputArray
 000000A9  E2 CE			LOOP  _CallWriteVal

					;------------------------------------------------------------------
					; Calculates the sum of all the signed integers and uses WriteVal
					;		to convert and display it with a message to the user.
					;------------------------------------------------------------------
					; Set loop counter to 10, start at first element address, and initialize sum to 0
 000000AB  B9 0000000A			MOV   ECX, LENGTHOF userInputArray
 000000B0  B8 00000000			MOV   EAX, 0
 000000B5  BA 00000000			MOV   EDX, 0
					
 000000BA			_SumLoop:
					; Sum up input values
 000000BA  BE 0000026D R		MOV   ESI, OFFSET userInputArray
 000000BF  03 F0			ADD   ESI, EAX                               ; Increment to next element array
 000000C1  8B 1E			MOV   EBX, [ESI]
 000000C3  03 D3			ADD   EDX, EBX
 000000C5  83 C0 04			ADD   EAX, TYPE userInputArray               ; Set EAX to offset of next element
 000000C8  E2 F0			LOOP  _SumLoop

					; Display sum prompt 
 000000CA  68 000001E4 R		PUSH  OFFSET sumPrompt
 000000CF  E8 00000000 E		CALL  CrLf
 000000D4  E8 00000243			CALL  prompts
 000000D9  8B C2			MOV   EAX, EDX
					
					; Call WriteVal to convert and display sum
 000000DB  68 00000243 R		PUSH  OFFSET intToStr
 000000E0  68 00000250 R		PUSH  OFFSET revIntToStr
 000000E5  FF 35 0000025D R		PUSH  sizeRevStr
 000000EB  52				PUSH  EDX
 000000EC  E8 0000019B			CALL  WriteVal

					;------------------------------------------------------------------
					; Calculates the average of the signed integers by taking the sum
					;		and dividing it by 10. The average is then displayed in
					;		truncated form (integer part only) along with a message.
					;------------------------------------------------------------------
					; Calulate average
 000000F1  BA 00000000			MOV   EDX, 0
 000000F6  99				CDQ
 000000F7  BB 0000000A			MOV   EBX, 10
 000000FC  F7 FB			IDIV  EBX
					
					; Diplay average prompt 
 000000FE  68 00000202 R		PUSH  OFFSET averagePrompt
 00000103  E8 00000000 E		CALL  CrLf
 00000108  E8 0000020F			CALL  prompts
					
					; Display truncated average
 0000010D  68 00000243 R		PUSH  OFFSET intToStr
 00000112  68 00000250 R		PUSH  OFFSET revIntToStr
 00000117  FF 35 0000025D R		PUSH  sizeRevStr
 0000011D  50				PUSH  EAX
 0000011E  E8 00000169			CALL  WriteVal
 00000123  E8 00000000 E		CALL  CrLf

					;------------------------------------------------------------------
					; Calls prompts proecdure to display goodbye message to user 
					;		and exits the program on return.
					;------------------------------------------------------------------
 00000128  68 0000021D R		PUSH  OFFSET goodbyePrompt
 0000012D  E8 00000000 E		CALL  CrLf
 00000132  E8 000001E5			CALL  prompts
					Invoke ExitProcess,0	                  ; exit to operating system
 00000137  6A 00	   *	    push   +000000000h
 00000139  E8 00000000 E   *	    call   ExitProcess
 0000013E			main ENDP

				;------------------------------------------------------------------------------
				; Name: mGetString
				;
				; Gets string input from user and returns address of the input string
				;		and adress to number of bytes entered by user.
				;
				; Preconditions: String buffer size is type DWORD.
				;
				; Postconditions: None
				;
				; Receives:
				;		numPrompt	 = reference to prompt asking user for num
				;		strBuffer	 = reference to string buffer
				;		strMaxInput	 = string buffer size
				;		strByteCount = reference to number of string bytes
				;
				; Returns:
				;		strBuffer	 = reference to user entered string
				;		strByteCount = reference to number of bytes entered
				;------------------------------------------------------------------------------
				mGetString MACRO numPrompt:REQ, strBuffer:REQ, strMaxInput:REQ, strByteCount:REQ
					PUSH  EDX
					PUSH  ECX
					PUSH  EAX
					
					; Display prompt
					MOV   EDX, numPrompt
					CALL  WriteString

					; Get user string input and store number of characters entered
					MOV   EDX, strBuffer 
					MOV   ECX, strMaxInput
					CALL  ReadString
					MOV   strByteCount, EAX
					
					POP   EAX
					POP   ECX
					POP   EDX
				ENDM

				;------------------------------------------------------------------------------
				; Name: mDisplayString
				;
				; Displays a string.
				;
				; Preconditions: None
				;
				; Postconditions: None
				;
				; Receives:
				;		someString		= reference to string location
				;
				; Returns: None
				;------------------------------------------------------------------------------
				mDisplayString MACRO someString:REQ
					PUSH  EDX

					; Display the string
					MOV   EDX, someString
					CALL  WriteString

					POP   EDX
				ENDM

				;------------------------------------------------------------------------------
				; Name: ReadVal
				;
				; Converts user inputted string to a signed integer and validates it only
				;		contains numerical values.
				;
				; Preconditions: String buffer size is type DWORD. 
				;
				; Postconditions: None
				;
				; Receives:
				;		[EBP+28]	= reference to user num prompt
				;		[EBP+24]	= reference to input string buffer
				;		[EBP+20]	= reference to input byte count
				;		[EBP+16]	= reference to num input error message
				;		[EBP+12]	= reference to user entered string
				;		[EBP+8]		= value of string buffer size
				;
				; Returns: Converted signed integer of user entered string.
				;------------------------------------------------------------------------------
 0000013E			ReadVal PROC
 0000013E  55				PUSH  EBP
 0000013F  8B EC			MOV   EBP, ESP
 00000141  56				PUSH  ESI
 00000142  51				PUSH  ECX
 00000143  52				PUSH  EDX
 00000144  50				PUSH  EAX
 00000145  53				PUSH  EBX
 00000146  57				PUSH  EDI
					
					mGetString [EBP+28], [EBP+24], [EBP+8], [EBP+20]
 00000147  52		     1		PUSH  EDX
 00000148  51		     1		PUSH  ECX
 00000149  50		     1		PUSH  EAX
 0000014A  8B 55 1C	     1		MOV   EDX, [EBP+28]
 0000014D  E8 00000000 E     1		CALL  WriteString
 00000152  8B 55 18	     1		MOV   EDX, [EBP+24] 
 00000155  8B 4D 08	     1		MOV   ECX, [EBP+8]
 00000158  E8 00000000 E     1		CALL  ReadString
 0000015D  89 45 14	     1		MOV   [EBP+20], EAX
 00000160  58		     1		POP   EAX
 00000161  59		     1		POP   ECX
 00000162  5A		     1		POP   EDX
					
					; Set registers with string reference, byte count, and initialized numeric value to 0
 00000163  8B 75 18			MOV   ESI, [EBP+24]
 00000166  8B 4D 14			MOV   ECX, [EBP+20]
 00000169  BA 00000000			MOV   EDX, 0
 0000016E  FC				CLD

 0000016F			_CharCompare:
					; Load first character and decrement counter
 0000016F  AC				LODSB
 00000170  49				DEC   ECX
					
					; Check if first character is '-'
 00000171  3C 2D			CMP   AL, 45
 00000173  74 5D			JZ    _ConvertNeg

					; Check if first character is '+'
 00000175  3C 2B			CMP   AL, 43
 00000177  0F 84 00000091		JZ    _ConvertPosSign
					
					; Check that character is a numerical val
 0000017D  3C 30			CMP   AL, 48
 0000017F  0F 82 000000C8		JB    _ErrorAskAgain
 00000185  3C 39			CMP   AL, 57
 00000187  0F 87 000000C0		JA    _ErrorAskAgain
 0000018D  41				INC   ECX

 0000018E			_ConvertNormal:
					; Ensure characters are numerical values
 0000018E  3C 30			CMP   AL, 48
 00000190  0F 82 000000B7		JB    _ErrorAskAgain
 00000196  3C 39			CMP   AL, 57
 00000198  0F 87 000000AF		JA    _ErrorAskAgain
					
					; Conversion: int * 10 + (ascii dec - 48)
 0000019E  2C 30			SUB   AL, 48
 000001A0  0F BE C0			MOVSX EAX, AL
 000001A3  50				PUSH  EAX
 000001A4  8B C2			MOV   EAX, EDX
 000001A6  BB 0000000A			MOV   EBX, 10
 000001AB  52				PUSH  EDX
 000001AC  BA 00000000			MOV   EDX, 0
 000001B1  F7 E3			MUL   EBX
 000001B3  83 FA 00			CMP   EDX, 0						; Too large of a value -> EDX:EAX
 000001B6  0F 85 0000008F		JNZ   _PopAndError
 000001BC  5A				POP   EDX 
 000001BD  5B				POP   EBX
 000001BE  03 C3			ADD   EAX, EBX
 000001C0  8B D0			MOV   EDX, EAX
					
					; Load next character and convert 
 000001C2  AC				LODSB
 000001C3  E2 C9			LOOP  _ConvertNormal
					
					; Make value signed and compare to max val to fit in 32-bit reg
 000001C5  6B D2 01			IMUL  EDX, 1
 000001C8  81 FA 7FFFFFFF		CMP   EDX, 2147483647
 000001CE  77 7D			JA    _ErrorAskAgain
 000001D0  EB 72			JMP   _MoveNumToMemVar

 000001D2			_ConvertNeg:
 000001D2  AC				LODSB

					; Ensure characters are numerical values
 000001D3  3C 30			CMP   AL, 48
 000001D5  72 76			JB    _ErrorAskAgain
 000001D7  3C 39			CMP   AL, 57
 000001D9  77 72			JA    _ErrorAskAgain
					
					; Conversion: int * 10 + (ascii dec - 48)
 000001DB  2C 30			SUB   AL, 48
 000001DD  0F BE C0			MOVSX EAX, AL
 000001E0  50				PUSH  EAX
 000001E1  8B C2			MOV   EAX, EDX
 000001E3  BB 0000000A			MOV   EBX, 10
 000001E8  52				PUSH  EDX
 000001E9  BA 00000000			MOV   EDX, 0
 000001EE  F7 E3			MUL   EBX
 000001F0  83 FA 00			CMP   EDX, 0                    ; Too large of a value -> EDX:EAX
 000001F3  75 56			JNZ   _PopAndError
 000001F5  5A				POP   EDX 
 000001F6  5B				POP   EBX
 000001F7  03 C3			ADD   EAX, EBX
 000001F9  8B D0			MOV   EDX, EAX
 000001FB  E2 D5			LOOP  _ConvertNeg
					
					; Negate value with two's complement and check if it fits in 32-bit reg
 000001FD  F7 DA			NEG   EDX
 000001FF  83 FA FF			CMP   EDX, 4294967295
 00000202  77 49			JA    _ErrorAskAgain
 00000204  81 FA 80000000		CMP   EDX, 2147483648
 0000020A  72 41			JB    _ErrorAskAgain
 0000020C  EB 36			JMP   _MoveNumToMemVar

 0000020E			_ConvertPosSign:
 0000020E  AC				LODSB

					; Ensure characters are numerical values
 0000020F  3C 30			CMP   AL, 48
 00000211  72 3A			JB    _ErrorAskAgain
 00000213  3C 39			CMP   AL, 57
 00000215  77 36			JA    _ErrorAskAgain

					; Conversion: int * 10 + (ascii dec - 48)
 00000217  2C 30			SUB   AL, 48
 00000219  0F BE C0			MOVSX EAX, AL
 0000021C  50				PUSH  EAX
 0000021D  8B C2			MOV   EAX, EDX
 0000021F  BB 0000000A			MOV   EBX, 10
 00000224  52				PUSH  EDX
 00000225  BA 00000000			MOV   EDX, 0
 0000022A  F7 E3			MUL   EBX
 0000022C  83 FA 00			CMP   EDX, 0					; Too large of a value -> EDX:EAX
 0000022F  75 1A			JNZ   _PopAndError
 00000231  5A				POP   EDX 
 00000232  5B				POP   EBX
 00000233  03 C3			ADD   EAX, EBX
 00000235  8B D0			MOV   EDX, EAX
 00000237  E2 D5			LOOP  _ConvertPosSign
					
					; Make value signed and compare to max val to fit in 32-bit reg
 00000239  6B D2 01			IMUL  EDX, 1
 0000023C  81 FA 7FFFFFFF		CMP   EDX, 2147483647
 00000242  77 09			JA    _ErrorAskAgain

 00000244			_MoveNumToMemVar:
					; Store the converted numerical value in a memory variable
 00000244  8B 7D 0C			MOV   EDI, [EBP+12]
 00000247  89 17			MOV   [EDI], EDX
 00000249  EB 37			JMP   _PopAndReturn

 0000024B			_PopAndError:
					; Pop the top of stack for alignment then move to error
 0000024B  5A				POP   EDX 
 0000024C  5B				POP   EBX

 0000024D			_ErrorAskAgain:
					; Display error to user and request number again
 0000024D  FF 75 10			PUSH  [EBP+16]
 00000250  E8 000000C7			CALL  prompts
					mGetString [EBP+28], [EBP+24], [EBP+8], [EBP+20]
 00000255  52		     1		PUSH  EDX
 00000256  51		     1		PUSH  ECX
 00000257  50		     1		PUSH  EAX
 00000258  8B 55 1C	     1		MOV   EDX, [EBP+28]
 0000025B  E8 00000000 E     1		CALL  WriteString
 00000260  8B 55 18	     1		MOV   EDX, [EBP+24] 
 00000263  8B 4D 08	     1		MOV   ECX, [EBP+8]
 00000266  E8 00000000 E     1		CALL  ReadString
 0000026B  89 45 14	     1		MOV   [EBP+20], EAX
 0000026E  58		     1		POP   EAX
 0000026F  59		     1		POP   ECX
 00000270  5A		     1		POP   EDX
 00000271  8B 75 18			MOV   ESI, [EBP+24]
 00000274  8B 4D 14			MOV   ECX, [EBP+20]
 00000277  BA 00000000			MOV   EDX, 0
 0000027C  FC				CLD
 0000027D  E9 FFFFFEED			JMP   _CharCompare

 00000282			_PopAndReturn:
 00000282  5F				POP   EDI
 00000283  5B				POP   EBX
 00000284  58				POP   EAX
 00000285  5A				POP   EDX
 00000286  59				POP   ECX
 00000287  5E				POP   ESI
 00000288  5D				POP   EBP
 00000289  C2 0018			RET   24
 0000028C			ReadVal ENDP

				;------------------------------------------------------------------------------
				; Name: WriteVal
				;
				; Takes a signed integer and converts it to a string.
				;
				; Preconditions: Integer is type SDWORD and string size is type DWORD.
				;
				; Postconditions: None
				;
				; Receives:
				;		[EBP+20]	= reference to converted string
				;		[EBP+16]	= reference to reversed converted string
				;		[EBP+12]	= value of size of string
				;		[EBP+8]		= value of signed integer
				;
				; Returns: Converted string and reversed converted string of signed integer.
				;------------------------------------------------------------------------------
 0000028C			WriteVal PROC
 0000028C  55				PUSH  EBP
 0000028D  8B EC			MOV   EBP, ESP
 0000028F  56				PUSH  ESI
 00000290  57				PUSH  EDI
 00000291  50				PUSH  EAX
 00000292  53				PUSH  EBX
 00000293  51				PUSH  ECX
 00000294  52				PUSH  EDX

					; Clear string
 00000295  FC				CLD
 00000296  8B 7D 14			MOV   EDI, [EBP+20]
 00000299  8B 4D 0C			MOV   ECX, [EBP+12]
 0000029C  B0 00			MOV   AL, 0
 0000029E  F3/ AA			REP   STOSB

					; Clear reversed string
 000002A0  8B 7D 10			MOV   EDI, [EBP+16]
 000002A3  8B 4D 0C			MOV   ECX, [EBP+12]
 000002A6  B0 00			MOV   AL, 0
 000002A8  F3/ AA			REP   STOSB

					; Set registers to convert number to string
 000002AA  8B 45 08			MOV   EAX, [EBP+8]
 000002AD  8B 7D 14			MOV   EDI, [EBP+20]
 000002B0  BB 0000000A			MOV   EBX, 10
 000002B5  B9 00000000			MOV   ECX, 0

					; Compare number to max 32-bit reg to determine if pos or neg
 000002BA  3D 7FFFFFFF			CMP   EAX, 2147483647
 000002BF  77 02			JA    _NegateVal
 000002C1  76 1F			JBE   _ConvertPosVal

 000002C3			_NegateVal:
 000002C3  F7 D8			NEG   EAX                   ; Two's complement to create negative value

 000002C5			_ConvertNegVal:
					; Convert a negative integer to string, integer/10 -> remainder + 48 = ascii
 000002C5  BA 00000000			MOV   EDX, 0
 000002CA  F7 F3			DIV   EBX
 000002CC  80 C2 30			ADD   DL, 48
 000002CF  50				PUSH  EAX
 000002D0  8A C2			MOV   AL, DL
 000002D2  AA				STOSB
 000002D3  41				INC   ECX
 000002D4  58				POP   EAX
 000002D5  83 F8 00			CMP   EAX, 0
 000002D8  74 02			JZ    _AppendNegSign
 000002DA  75 E9			JNZ   _ConvertNegVal

 000002DC			_AppendNegSign:
					; Append ascii '-' to string for negative
 000002DC  B0 2D			MOV   AL, 45      
 000002DE  AA				STOSB
 000002DF  41				INC   ECX
 000002E0  EB 17			JMP   _RevStr

 000002E2			_ConvertPosVal:
					; Convert a positive integer to string, integer/10 -> remainder + 48 = ascii
 000002E2  BA 00000000			MOV   EDX, 0
 000002E7  F7 F3			DIV   EBX
 000002E9  80 C2 30			ADD   DL, 48
 000002EC  50				PUSH  EAX
 000002ED  8A C2			MOV   AL, DL
 000002EF  AA				STOSB
 000002F0  41				INC   ECX
 000002F1  58				POP   EAX
 000002F2  83 F8 00			CMP   EAX, 0
 000002F5  74 02			JZ    _RevStr
 000002F7  75 E9			JNZ   _ConvertPosVal

 000002F9			_RevStr:
					; Set registers to reverse string
 000002F9  8B 75 14			MOV   ESI, [EBP+20]
 000002FC  8B 7D 10			MOV   EDI, [EBP+16]
 000002FF  03 F1			ADD   ESI, ECX
 00000301  4E				DEC   ESI

 00000302			_RevStrLoop:
					; Reverse the string and display it
 00000302  FD				STD   
 00000303  AC				LODSB
 00000304  FC				CLD
 00000305  AA				STOSB
 00000306  E2 FA			LOOP  _RevStrLoop
					mDisplayString [EBP+16]
 00000308  52		     1		PUSH  EDX
 00000309  8B 55 10	     1		MOV   EDX, [EBP+16]
 0000030C  E8 00000000 E     1		CALL  WriteString
 00000311  5A		     1		POP   EDX

 00000312			_PopAndReturn:
 00000312  5A				POP   EDX
 00000313  59				POP   ECX
 00000314  5B				POP   EBX
 00000315  58				POP   EAX
 00000316  5F				POP   EDI
 00000317  5E				POP   ESI
 00000318  5D				POP   EBP
 00000319  C2 0010			RET   16
 0000031C			WriteVal ENDP

				;------------------------------------------------------------------------------
				; Name: prompts
				;
				; Passes reference of string to mDisplayString macro to display prompt.
				;
				; Preconditions: None
				;
				; Postconditions: None
				;
				; Receives:
				;		[EBP+8]		= reference to string
				;
				; Returns: None
				;------------------------------------------------------------------------------
 0000031C			prompts PROC
 0000031C  55				PUSH  EBP
 0000031D  8B EC			MOV   EBP, ESP
					
					mDisplayString [EBP+8]
 0000031F  52		     1		PUSH  EDX
 00000320  8B 55 08	     1		MOV   EDX, [EBP+8]
 00000323  E8 00000000 E     1		CALL  WriteString
 00000328  5A		     1		POP   EDX

 00000329  5D				POP   EBP
 0000032A  C2 0004			RET   4
 0000032D			prompts ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30136.0	    12/06/21 02:45:34
<Project 6 - String Primitives and Macros     (Proj6_chaudhr  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000295 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000032D Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 0000013E _TEXT	Length= 0000014E Public STDCALL
  _CharCompare . . . . . . . . .	L Near	 0000016F _TEXT	
  _ConvertNormal . . . . . . . .	L Near	 0000018E _TEXT	
  _ConvertNeg  . . . . . . . . .	L Near	 000001D2 _TEXT	
  _ConvertPosSign  . . . . . . .	L Near	 0000020E _TEXT	
  _MoveNumToMemVar . . . . . . .	L Near	 00000244 _TEXT	
  _PopAndError . . . . . . . . .	L Near	 0000024B _TEXT	
  _ErrorAskAgain . . . . . . . .	L Near	 0000024D _TEXT	
  _PopAndReturn  . . . . . . . .	L Near	 00000282 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000028C _TEXT	Length= 00000090 Public STDCALL
  _NegateVal . . . . . . . . . .	L Near	 000002C3 _TEXT	
  _ConvertNegVal . . . . . . . .	L Near	 000002C5 _TEXT	
  _AppendNegSign . . . . . . . .	L Near	 000002DC _TEXT	
  _ConvertPosVal . . . . . . . .	L Near	 000002E2 _TEXT	
  _RevStr  . . . . . . . . . . .	L Near	 000002F9 _TEXT	
  _RevStrLoop  . . . . . . . . .	L Near	 00000302 _TEXT	
  _PopAndReturn  . . . . . . . .	L Near	 00000312 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000013E Public STDCALL
  _CallReadVal . . . . . . . . .	L Near	 00000028 _TEXT	
  _CallWriteVal  . . . . . . . .	L Near	 00000079 _TEXT	
  _ListSpacing . . . . . . . . .	L Near	 0000009C _TEXT	
  _WriteValLoop  . . . . . . . .	L Near	 000000A6 _TEXT	
  _SumLoop . . . . . . . . . . .	L Near	 000000BA _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
prompts  . . . . . . . . . . . .	P Near	 0000031C _TEXT	Length= 00000011 Public STDCALL
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
averagePrompt  . . . . . . . . .	Byte	 00000202 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
cyan . . . . . . . . . . . . . .	Number	 00000003h   
enteredNumError  . . . . . . . .	Byte	 0000016D _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbyePrompt  . . . . . . . . .	Byte	 0000021D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
intToStr . . . . . . . . . . . .	Byte	 00000243 _DATA	
intro1 . . . . . . . . . . . . .	Byte	 00000000 _DATA	
intro2 . . . . . . . . . . . . .	Byte	 0000005C _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listPrompt . . . . . . . . . . .	Byte	 000001BF _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
red  . . . . . . . . . . . . . .	Number	 00000004h   
revIntToStr  . . . . . . . . . .	Byte	 00000250 _DATA	
sizeRevStr . . . . . . . . . . .	DWord	 0000025D _DATA	
spacer . . . . . . . . . . . . .	Byte	 00000233 _DATA	
sumPrompt  . . . . . . . . . . .	Byte	 000001E4 _DATA	
userEnteredNum . . . . . . . . .	DWord	 00000269 _DATA	
userInputArray . . . . . . . . .	DWord	 0000026D _DATA	
userNumPrompt  . . . . . . . . .	Byte	 0000014E _DATA	
userStrBufferSize  . . . . . . .	DWord	 00000261 _DATA	
userStrBuffer  . . . . . . . . .	Byte	 00000236 _DATA	
userStrByteCount . . . . . . . .	DWord	 00000265 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
